# Copyright (c) 2010 - 2014, AllSeen Alliance. All rights reserved.
#
#    Permission to use, copy, modify, and/or distribute this software for any
#    purpose with or without fee is hereby granted, provided that the above
#    copyright notice and this permission notice appear in all copies.
#
#    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# 

import os
Import('env')

# Indicate that this SConscript file has been loaded already
env['_ALLJOYNCORE_'] = True

# Header files in common require "dist/cpp/inc/alljoyn" in the include path to find Status.h
env.Append(CPPPATH = ['$DISTDIR/cpp/inc/alljoyn'])

# Dependent Projects
common_hdrs, common_static_objs, common_shared_objs = env.SConscript(['../common/SConscript'])


# Make alljoyn C++ dist a sub-directory of the alljoyn dist.
env['CPP_DISTDIR'] = env['DISTDIR'] + '/cpp'
env['CPP_TESTDIR'] = env['TESTDIR'] + '/cpp'
env['WINRT_DISTDIR'] = env['DISTDIR'] + '/winRT'

ajenv = env.Clone()

# Bullseye code coverage for 'debug' builds.
if ajenv['VARIANT'] == 'debug':
    if(not(ajenv.has_key('BULLSEYE_BIN'))):
        print('BULLSEYE_BIN not specified')
    else:
        ajenv.PrependENVPath('PATH', ajenv.get('BULLSEYE_BIN'))
        if (not(os.environ.has_key('COVFILE'))):
            print('Error: COVFILE environment variable must be set')
            if not GetOption('help'):
                Exit(1)
        else:
            ajenv.PrependENVPath('COVFILE', os.environ['COVFILE'])

# manually add dependencies for xml to h, and for files included in the xml
ajenv.Depends('$OBJDIR/Status.h', 'src/Status.xml')
ajenv.Depends('$OBJDIR/Status.h', '../common/src/Status.xml')
ajenv.Append(STATUS_FLAGS=['--base=%s' % os.getcwd()])


if ajenv['OS_GROUP'] == 'winrt':
    ajenv.Depends('$OBJDIR/Status_CPP0x.h', 'src/Status.xml')
    ajenv.Depends('$OBJDIR/Status_CPP0x.h', '../common/src/Status.xml')
    ajenv.AppendUnique(CFLAGS=['/D_WINRT_DLL'])
    ajenv.AppendUnique(CXXFLAGS=['/D_WINRT_DLL'])
    ajenv.Append(STATUS_FLAGS=['--cpp0xnamespace=AllJoyn'])

# Add support for multiple build targets in the same workset
ajenv.VariantDir('$OBJDIR', 'src', duplicate = 0)
ajenv.VariantDir('$OBJDIR/test', 'test', duplicate = 0)
ajenv.VariantDir('$OBJDIR/router', 'router', duplicate = 0)
ajenv.VariantDir('$OBJDIR/samples', 'samples', duplicate = 0)
ajenv.VariantDir('$OBJDIR/alljoyn_android', 'alljoyn_android', duplicate = 0)

# AllJoyn Install
ajenv.Install('$OBJDIR', ajenv.File('src/Status.xml'))
ajenv.Status('$OBJDIR/Status')
core_headers = ajenv.Install('$CPP_DISTDIR/inc/alljoyn', '$OBJDIR/Status.h')
if ajenv['OS_GROUP'] == 'winrt':
    core_headers += ajenv.Install('$CPP_DISTDIR/inc/alljoyn', '$OBJDIR/Status_CPP0x.h')

core_headers += ajenv.Install('$CPP_DISTDIR/inc/alljoyn', [ h for h in ajenv.Glob('inc/alljoyn/*.h') if h not in ajenv.Glob('inc/alljoyn/Status*.h') ])

for d, h in common_hdrs.items():
    core_headers += ajenv.Install('$CPP_DISTDIR/inc/%s' % d, h)

# Header file includes
#ajenv.Append(CPPPATH = [ajenv.Dir('$CPP_DISTDIR/inc'), ajenv.Dir('$CPP_DISTDIR/inc/alljoyn')])

# Make private headers available
ajenv.Append(CPPPATH = [ajenv.Dir('src')])

# AllJoyn Libraries
libs, static_objs, shared_objs = ajenv.SConscript('$OBJDIR/SConscript', exports = ['ajenv', 'common_static_objs', 'common_shared_objs'])

ajenv.Install('$CPP_DISTDIR/lib', libs)

if ajenv['OS_GROUP'] != 'winrt':
    # Do not include alljoyn.lib in LIBS otherwise linking errors will occur.
    env.Prepend(LIBS = 'alljoyn')

# AllJoyn Daemon, daemon library, and bundled daemon object file
if ajenv['OS_GROUP'] == 'winrt':
    winrt_objs = static_objs
    daemon_progs, ajrlib, brobj = ajenv.SConscript('$OBJDIR/router/SConscript', exports = ['winrt_objs'])
    ajenv.Install('$WINRT_DISTDIR/bin', daemon_progs)
    # WinRT needs the full path to the exact file.
    bundled_router_obj = brobj
    router_lib = ajrlib

else:
    daemon_progs, ajrlib, brobj = ajenv.SConscript('$OBJDIR/router/SConscript')
    ajenv.Install('$CPP_DISTDIR/bin', daemon_progs)
    ajenv.Install('$CPP_DISTDIR/lib', ajrlib)
    bundled_router_obj = ajenv.Install('$CPP_DISTDIR/lib', brobj)
    router_lib = 'ajrouter'


# The global env needs the 'brobj' for the Java binding
env['brobj'] = bundled_router_obj
env['ajrlib'] = router_lib


# only include command line samples, unit test, test programs if we are not 
# building for iOS. No support on iOS for command line applications.
if env['OS'] == 'darwin' and env['CPU'] in ['arm', 'armv7', 'armv7s']:
    progs = []
else:
    # Test programs
    progs = env.SConscript('$OBJDIR/test/SConscript')
    ajenv.Install('$CPP_DISTDIR/bin', progs)

    # Build unit Tests
    env.SConscript('unit_test/SConscript', variant_dir='$OBJDIR/unittest', duplicate = 0)

    # Sample programs
    env.SConscript('$OBJDIR/samples/SConscript')

# Android daemon runner
ajenv.SConscript('$OBJDIR/alljoyn_android/SConscript')

# Release notes and misc. legals
if ajenv['OS_CONF'] == 'darwin':
    if ajenv['CPU'] == 'x86':
        ajenv.InstallAs('$DISTDIR/README.txt', 'docs/README.darwin.txt')
elif ajenv['OS_CONF'] == 'winrt':
    ajenv.InstallAs('$DISTDIR/README.txt', 'docs/README.winrt.txt')
elif ajenv['OS_CONF'] == 'windows':
    ajenv.InstallAs('$DISTDIR/README.txt', 'docs/README.windows.txt')
    ajenv.Install('$DISTDIR', 'docs/AllJoyn_API_Changes_java.txt')
elif ajenv['OS_CONF'] == 'android':
    ajenv.InstallAs('$DISTDIR/README.txt', 'docs/README.android.txt')
    ajenv.Install('$DISTDIR', 'docs/AllJoyn_API_Changes_java.txt')
else:  # linux based platforms
    ajenv.InstallAs('$DISTDIR/README.txt', 'docs/README.linux.txt')
    ajenv.Install('$DISTDIR', 'docs/AllJoyn_API_Changes_java.txt')

if not (ajenv['OS'] == 'darwin' and ajenv['CPU'] in ['arm', 'armv7', 'armv7s']):
    ajenv.Install('$DISTDIR', 'docs/AllJoyn_API_Changes_cpp.txt')
    ajenv.Install('$DISTDIR', 'docs/ReleaseNotes.txt')

# Build docs
installDocs = ajenv.SConscript('docs/SConscript', exports = ['ajenv', 'core_headers'])

#Build Win8 SDK installer
ajenv.SConscript('win8_sdk/SConscript', exports = ['ajenv'])
