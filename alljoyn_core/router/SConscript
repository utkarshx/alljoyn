# Copyright (c) 2010 - 2014, AllSeen Alliance. All rights reserved.
#
#    Permission to use, copy, modify, and/or distribute this software for any
#    purpose with or without fee is hereby granted, provided that the above
#    copyright notice and this permission notice appear in all copies.
#
#    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# 

from os.path import basename

Import('env')

router_env = env.Clone()

vars = Variables()
vars.Add(EnumVariable('ICE', 'Enable ICE Transport', 'off', allowed_values=('on', 'off')))
vars.Update(router_env)
Help(vars.GenerateHelpText(router_env))


if router_env['OS'] == 'android':
    # Android Dalvik code is tied to the hip of daemon for proximity scanner
    # functionality.  Let the build for Android know whether ICE support is
    # available or not.
    env['ANDROID_PROXIMITY'] = router_env['ICE']


if router_env['OS'] == "darwin":
    # Darwin has its own version of the daemon transport
    srcs = [ f for f in router_env.Glob('*.cc') + router_env.Glob('*.c') + [router_env['OS'] + '/DaemonTransport.cc']]
else:
    srcs = [ f for f in router_env.Glob('*.cc') + router_env.Glob('*.c') + [router_env['OS_GROUP'] + '/DaemonTransport.cc']]

if router_env['OS'] != "android":
    srcs += [router_env['OS_GROUP'] + '/PermissionMgr.cc']

router_env.Append(CPPPATH = [ router_env.Dir('..').srcnode(),
                              router_env.Dir('.').srcnode(),
                              router_env.Dir('$OS_GROUP').srcnode() ])

router_objs = router_env.Object(srcs)

router_objs.extend(router_env.SConscript('ns/SConscript', exports = ['router_env']))

# Add in P2P Helper support for Android only
if router_env['OS'] == "android":
    router_objs.extend(router_env.SConscript('android/SConscript', exports = ['router_env']))


if router_env['ICE'] == 'on':
    router_env.Append(CPPDEFINES=['AJ_ENABLE_ICE'])
    router_env.Append(CPPPATH = [ router_env.Dir('./packetengine').srcnode(),
                                  router_env.Dir('./ice').srcnode() ])
    pe_objs = router_env.SConscript('packetengine/SConscript', exports = ['router_env'])
    ice_objs = router_env.SConscript('ice/SConscript', exports = ['router_env'])
    json_objs = router_env.SConscript('JSON/SConscript', exports = ['router_env'])
    router_objs.extend(pe_objs + ice_objs + json_objs)

# Bundled daemon object file
brobj = router_env.SConscript('bundled/SConscript', exports = ['router_env'])

# AllJoyn Daemon
if router_env['OS_GROUP']=='winrt':
    Import('winrt_objs')
    router_objs.extend(winrt_objs + [brobj])

progs, os_objs = router_env.SConscript('${OS_GROUP}/SConscript', exports=['router_env', 'router_objs'])

router_objs.extend(os_objs)

# Daemon library
if router_env['OS_GROUP'] != 'winrt':
    lib = router_env.StaticLibrary('ajrouter', router_objs);
else:
    lib = []

# AllJoyn Daemon test programs
if router_env['OS_GROUP'] == 'winrt':
    tests = []
elif router_env['OS'] == 'darwin':
    if router_env['CPU'] in ['arm', 'armv7', 'armv7s']:
        print 'Not building unit tests for iOS...'    
        tests = []
    else:
        print 'Building unit tests for darwin...'
        tests = router_env.SConscript('test/SConscript', exports = ['router_env', 'router_objs'])
else:
    tests = router_env.SConscript('test/SConscript', exports = ['router_env', 'router_objs'])
    
# Return daemon and related tests
ret = progs + tests, lib, brobj
Return('ret')
